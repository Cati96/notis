swagger: "2.0"
info:
  description: "This is a sample server definition.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "notis@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "notary"
  description: "Endpoints for notaries"
- name: "translator"
  description: "Endpoints for translators"
- name: "addresses"
  description: "Endpoints for address"
- name: "services"
  description: "Endpoints for services"
schemes:
- "https"
- "http"
paths:
  /notaries:
    post:
      tags:
      - "notary"
      summary: "Add a new notary"
      description: ""
      operationId: "addNotary"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notary object that needs to be added to the RDF"
        required: true
        schema:
          $ref: "#/definitions/Notary"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Object successfully stored"
  /notaries/{id}:
    get:
      tags:
      - "notary"
      summary: "Find notary by ID"
      description: "Returns a single notary"
      operationId: "getNotaryById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of noraty to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Notary"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Notary not found"
    put:
      tags:
      - "notary"
      summary: "Update a notary"
      description: ""
      operationId: "updateNotary"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notary object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Notary"
      - name: "id"
        in: "path"
        description: "ID of noraty to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Notary not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
    delete:
      tags:
      - "notary"
      summary: "Deletes a notary"
      description: ""
      operationId: "deleteNotary"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Notary id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Notary deleted successfully"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /notaries/getAllForAddressId:
    get:
      tags:
      - "notary"
      summary: "Finds notaries by city"
      description: "Retrieve all Notaries from a specific address"
      operationId: "findNotariesByStatus"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Id of an address"
        required: true
        type: "number"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notary"
        400:
          description: "Invalid id"
  /notaries/getAll:
    get:
      tags:
      - "notary"
      summary: "Finds notaries by documents"
      description: "Retrieve all notaries"
      operationId: "findNotariesByDocuments"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notary"
        400:
          description: "Invalid tag value"
  /translators:
    post:
      tags:
      - "translator"
      summary: "Add a new translator"
      description: ""
      operationId: "addTranslator"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Translator object that needs to be added to the RDF"
        required: true
        schema:
          $ref: "#/definitions/Translator"
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Object successfully stored"
  /translators/{id}:
    get:
      tags:
      - "translator"
      summary: "Find translator by ID"
      description: "Returns a single translator"
      operationId: "getTranslatorById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of translator to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Translator"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Translator not found"
    put:
      tags:
      - "translator"
      summary: "Update a translator"
      description: ""
      operationId: "updateTranslator"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Translator object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Translator"
      - name: "id"
        in: "path"
        description: "ID of translator to update"
        required: true
        type: "integer"
        format: "int64"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Translator not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
    delete:
      tags:
      - "translator"
      summary: "Deletes a translator"
      description: ""
      operationId: "deleteTranslator"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Translator id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Translator deleted successfully"
        400:
          description: "Invalid ID supplied"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /translators/getAllForAddressId:
    get:
      tags:
      - "translator"
      summary: "Finds notaries by city"
      description: "Retrieve all Translators from a specific address"
      operationId: "findTranslatorByAddressId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "query"
        description: "Id of an address"
        required: true
        type: "number"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Translator"
        400:
          description: "Invalid id"
  /translators/getAll:
    get:
      tags:
      - "translator"
      summary: "Retrieve all notaries"
      description: "Retrieve all notaries"
      operationId: "retrieveAllTranslators"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Translator"
        400:
          description: "Invalid tag value"
  /addresses:
    put:
      tags:
      - "addresses"
      summary: "Update an address"
      description: ""
      operationId: "updateAddress"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Address object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Address"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Address not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /addresses/getAllForEntityType:
    get:
      tags:
      - "addresses"
      summary: "Retrieve all addresses based on entity type"
      description: "Returns all addresses"
      operationId: "getAddresses"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityType"
        in: "path"
        description: "Entity type: Notary or Translator"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        400:
          description: "Invalid entity type"
  /addresses/getAllForEntityTypeAndCustomLocation:
    get:
      tags:
      - "addresses"
      summary: "Retrieve all addresses based on entity type"
      description: "Returns all addresses"
      operationId: "getAddressesByTypeAndAddress"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityType"
        in: "path"
        description: "Entity type: Notary or Translator"
        required: true
        type: "string"
      - name: "city"
        in: "path"
        description: "A city name"
        required: true
        type: "string"
      - name: "locality"
        in: "path"
        description: "A locality name"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Address"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Notary not found"

  /services/{id}:
    post:
      tags:
      - "services"
      summary: "Add a new service"
      description: ""
      operationId: "addService"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Service object that needs to be added to the RDF"
        required: true
        schema:
          $ref: "#/definitions/Service"
      - in: "path"
        name: "id"
        type: "string"
        description: "Id of entity"
        required: true
      responses:
        405:
          description: "Invalid input"
        200:
          description: "Object successfully stored"
    put:
      tags:
      - "services"
      summary: "Update a service"
      description: ""
      operationId: "updateService"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Service object that needs to be updated"
        required: true
        schema:
          $ref: "#/definitions/Service"
      - name: "id"
        in: "path"
        description: "ID of entity to update"
        required: true
        type: "string"
        format: "int64"
      responses:
        405:
          description: "Invalid input"
        404:
          description: "Service not found"
        200:
          description: "Object successfully updated"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
    delete:
      tags:
      - "services"
      summary: "Deletes a service"
      description: ""
      operationId: "deleteService"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Entity id"
        required: true
        type: "integer"
        format: "int64"
      - name: "serviceid"
        in: "path"
        description: "Service id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Service deleted successfully"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Entity or service not found"
      security:
      - admin_auth:
        - "write:entity"
        - "read:entity"
  /services/getAllTypesForEntityType:
    get:
      tags:
      - "notary"
      summary: "Retrieve all services types based on entity type"
      description: "Retrieve all services types based on entity type"
      operationId: "findAllServiceTypes"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityType"
        in: "query"
        description: "Entity type"
        required: true
        type: "string"
        collectionFormat: "multi"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notary"
        400:
          description: "Invalid id"  
  /timetables:
    put:
        tags:
        - "timetables"
        summary: "Update a Timetable"
        description: ""
        operationId: "updateTimetable"
        consumes:
        - "application/json"
        - "application/xml"
        produces:
        - "application/xml"
        - "application/json"
        parameters:
        - in: "body"
          name: "body"
          description: "Timetable object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Timetable"
        responses:
          405:
            description: "Invalid input"
          404:
            description: "Timetable not found"
          200:
            description: "Object successfully updated"
        security:
        - admin_auth:
          - "write:entity"
          - "read:entity"
  /documents/getAllForEntityTypeAndServiceId:
    get:
      tags:
      - "documents"
      summary: "Retrieve all documents based on entity type and service id"
      description: "Retrieve all documents based on entity type and service id"
      operationId: "findAllDocuemntsBasedOnEnityTypeAndServiceid"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "entityType"
        in: "path"
        description: "Entity type"
        required: true
        type: "string"
      - name: "serviceId"
        in: "path"
        description: "Service id"
        required: true
        type: "number"
      responses:
        200:
          description: "successfully retrieved notaries"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Document"
        400:
          description: "Invalid id"  
  /documents/getAllForAddressId:
    get:
      tags:
      - "documents"
      summary: "Retrieve all documents based on address id"
      description: "Retrieve all documents based on address id"
      operationId: "findAllDocuemntsBasedOnAddressId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "addressId"
        in: "path"
        description: "Address id"
        required: true
        type: "number"
      responses:
        200:
          description: "successfully retrieved documents"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Document"
        400:
          description: "Invalid id"
  /documents/getAll:
    get:
      tags:
      - "documents"
      summary: "Retrieve all documents"
      description: "Retrieve all documents"
      operationId: "findAllDocuemnts"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "successfully retrieved documents"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Document"
        400:
          description: "Invalid id"
securityDefinitions:
  admin_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:entity: "modify entities in your account"
      read:entity: "read your entities"
definitions:
  Notary:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          example: "Constantin Constantinescu"
        authorizationNumber:
          type: "string"
          example: "23423423423"
        phoneNumber:
          type: "string"
          example: "0742800955"
        address:
          type: "object"
          $ref: "#/definitions/Address"
        timetable:
          type: "object"
          $ref: "#/definitions/Timetable"
        services:
          type: "array"
          items:
              $ref: "#/definitions/Service"
  Translator:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          example: "Constantin Constantinescu"
        authorizationNumber:
          type: "string"
          example: "23423423423"
        phoneNumber:
          type: "string"
          example: "0742800955"
        address:
          type: "object"
          $ref: "#/definitions/Address"
        timetable:
          type: "object"
          $ref: "#/definitions/Timetable"
        services:
          type: "array"
          items:
              $ref: "#/definitions/Service"
        languages:
          type: "array"
          items:
              type: "string"
  Document:
    type: "object"
    required:
    - "name"
    properties:
        id:
          type: "integer"
          format: "int64"
        type:
          type: "string"
          example: "type1"
        format:
          type: "string"
          example: "pdf"
        template:
          type: "string"
          example: "https://templates.com/notaryDocument1"
        price:
          type: "number"
          example: 30.2
  Timetable:
    type: "object"
    properties:
        id:
          type: "integer"
          format: "int64"
        monday:
          type: "string"
          example: "8-16"
        tuesday:
          type: "string"
          example: "8-16"
        wednesday:
          type: "string"
          example: "8-16"
        thursday:
          type: "string"
          example: "8-16"
        friday:
          type: "string"
          example: "8-16"
        saturday:
          type: "string"
          example: "8-16"
        sunday:
          type: "string"
          example: "8-16"
  Address:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      country:
        type: "string"
        example: "Romania"
      county:
        type: "string"
        example: "Iasi"
      city:
        type: "string"
        example: "Iasi"
      locality:
        type: "string"
        example: "Baltatesti"
      street:
        type: "string"
        example: "Clopotari"
      streetNumber:
        type: "string"
        example: "54"
      zipCode:
        type: "string"
        example: "610119"
      other:
        type: "string"
        example: "comment"
  Service:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
        example: "Marriage agreement"
      description:
        type: "string"
        example: "description"
      documents:
        type: "array"
        items:
              $ref: "#/definitions/Document"
        example: "array of documents"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"